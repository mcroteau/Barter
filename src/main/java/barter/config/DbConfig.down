package barter.config;

import barter.common.Barter;
import org.hsqldb.util.DatabaseManagerSwing;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.beans.factory.config.MethodInvokingBean;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.env.Environment;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.datasource.DriverManagerDataSource;
import org.springframework.jdbc.datasource.embedded.EmbeddedDatabase;
import org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder;
import org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType;



import javax.sql.DataSource;

@Configuration
public class DbConfig {

    @Value("${db.host}")
    private String dbHost;

    @Value("${db.name}")
    private String dbName;

    @Value("${db.username}")
    private String dbUsername;

    @Value("${db.password}")
    private String dbPassword;


    @Autowired
    Environment env;

    @Bean
    public DataSource dataSource(){
        if (Barter.isDevEnv(env)) {
            EmbeddedDatabaseBuilder builder = new EmbeddedDatabaseBuilder();
            EmbeddedDatabase db = builder.setType(EmbeddedDatabaseType.H2)
                    .addScript("classpath:create-db.sql")
                    .build();

            return db;
        }

        DriverManagerDataSource dmds = new DriverManagerDataSource();
        dmds.setDriverClassName("com.mysql.jdbc.Driver");
        dmds.setUrl("jdbc:mysql://" + dbHost + ":3306/" + dbName);
        dmds.setUsername(dbUsername);
        dmds.setPassword(dbPassword);

        return dmds;
    }

    @Bean
    public JdbcTemplate jdbcTemplate(){
        JdbcTemplate jdbcTemplate = new JdbcTemplate();
        jdbcTemplate.setDataSource(dataSource());
        return jdbcTemplate;
    }

    @Bean
    public NamedParameterJdbcTemplate namedParameterJdbcTemplate(){
        NamedParameterJdbcTemplate namedParameterJdbcTemplate = new NamedParameterJdbcTemplate(dataSource());
        return namedParameterJdbcTemplate;
    }

    @Bean
    public MethodInvokingBean dbGui(){
        MethodInvokingBean mib = new MethodInvokingBean();
        mib.setTargetClass(DatabaseManagerSwing.class);
        mib.setTargetMethod("main");
        mib.setArguments(new Object[]{
                "--url", "jdbc:h2:mem:dataSource",
                "--user", "sa",
                "--password", ""
        });
        return mib;
    }

}
